// Log de d√©marrage pour v√©rifier que le script fonctionne
console.log("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");

// Configuration WebSocket
let webSocketConnected = false;
let socketPort = 8080;
console.log("üõ† Tentative de connexion WebSocket...");

let oscSocket = new WebSocket(`ws://localhost:${socketPort}/tree-js`);

oscSocket.onopen = function () {
  console.log("‚úÖ WebSocket connect√© sur le port " + socketPort);
};

oscSocket.onerror = function (err) {
  console.error("‚ùå Erreur WebSocket :", err);
};

oscSocket.onclose = function () {
  console.warn("‚ö†Ô∏è WebSocket ferm√© !");
};

let tree = new Tree();

// Function pour mettre √† jour l'arbre avec les valeurs OSC
function mettreAJourArbre() {
  // Exemple : Mettre √† jour la hauteur de l'arbre avec la valeur re√ßue sur /Slider/1
  let hauteurSlider = oscData["/Slider/1"] || 1; // Valeur par d√©faut si non d√©finie

  // Mettre √† jour la hauteur de l'arbre
  tree.height = hauteurSlider;

  // Exemple : Mettre √† jour la couleur de l'arbre en fonction d'un autre slider (ex: /Slider/2)
  let couleurSlider = oscData["/Slider/2"] || 0; // Valeur par d√©faut
  tree.color = `rgb(${couleurSlider}, 0, 0)`; // Couleur rouge bas√©e sur la valeur

  // Exemple : Modifier la forme ou un autre param√®tre de l'arbre
  let formeSlider = oscData["/Slider/3"] || 1; // Valeur par d√©faut
  tree.shape = formeSlider > 0.5 ? "conique" : "cylindrique"; // Choix de forme

  console.log("Arbre mis √† jour avec les nouvelles valeurs OSC :", tree);
}

// Appeler cette fonction √† chaque fois qu'une nouvelle donn√©e OSC est re√ßue
oscSocket.onmessage = function (event) {
  if (event.data instanceof Blob) {
    let reader = new FileReader();
    reader.onload = function () {
      let arrayBuffer = reader.result;
      traiterMessage(arrayBuffer); // Traiter les messages OSC
      mettreAJourArbre(); // Mettre √† jour l'arbre avec les nouvelles donn√©es
    };
    reader.readAsArrayBuffer(event.data);
  }
};

let oscData = {}; // Stockage des valeurs OSC

function traiterMessage(buffer) {
  let dataView = new DataView(buffer);
  let index = 0;
  let messageString = "";

  // üî• Lire le nom du message OSC (ex: "/Slider/3")
  while (index < buffer.byteLength) {
    let byte = dataView.getUint8(index++);
    if (byte === 0) break;
    messageString += String.fromCharCode(byte);
  }

  while (index % 4 !== 0) index++; // üîÑ Sauter les null terminators

  // üî• Lire les types de donn√©es OSC (ex: ",i")
  let typeTag = "";
  while (index < buffer.byteLength) {
    let byte = dataView.getUint8(index++);
    if (byte === 0) break;
    typeTag += String.fromCharCode(byte);
  }

  while (index % 4 !== 0) index++; // üîÑ Sauter les null terminators

  // üî• Lire les valeurs en fonction des types OSC
  let values = [];
  for (let i = 1; i < typeTag.length; i++) {
    let type = typeTag[i];

    if (type === "i") {
      // int32
      values.push(dataView.getInt32(index, false));
      index += 4;
    } else if (type === "f") {
      // float32
      values.push(dataView.getFloat32(index, false));
      index += 4;
    } else if (type === "s") {
      // string
      let str = "";
      while (index < buffer.byteLength) {
        let byte = dataView.getUint8(index++);
        if (byte === 0) break;
        str += String.fromCharCode(byte);
      }
      values.push(str);
    } else {
      console.warn("‚ö†Ô∏è Type OSC inconnu :", type);
    }
  }

  // ‚úÖ Stocker les donn√©es dans un objet pour une r√©cup√©ration plus facile
  oscData[messageString] = values.length === 1 ? values[0] : values;
  console.log("üìä Mise √† jour des donn√©es OSC :", oscData);
}

window.addEventListener("beforeunload", function () {
  if (webSocketConnected) {
    oscSocket.close(); // Ferme la connexion WebSocket lorsque la fen√™tre est ferm√©e
    console.log("WebSocket ferm√© avant la fermeture de la fen√™tre");
  } else {
    console.log("WebSocket d√©j√† ferm√© avant la fermeture de la fen√™tre");
  }
});
